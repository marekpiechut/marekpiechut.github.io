<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Architecture on rand(4) Thoughts</title><link>https://marekpiechut.github.io/tags/architecture/</link><description>Recent content in Architecture on rand(4) Thoughts</description><generator>Hugo -- 0.128.0</generator><language>en-us</language><copyright>2024 - Marek Piechut</copyright><lastBuildDate>Fri, 16 Sep 2016 23:33:41 +0000</lastBuildDate><atom:link href="https://marekpiechut.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>Circuit breakers - You don't need to wait for failures.</title><link>https://marekpiechut.github.io/post/2016-09-16-circuit-breakers/</link><pubDate>Fri, 16 Sep 2016 23:33:41 +0000</pubDate><guid>https://marekpiechut.github.io/post/2016-09-16-circuit-breakers/</guid><description>It gets very annoying when web app keeps hanging on server requests, only to fail with a timeout few seconds later. Or uses up all available network connections (remember, we only have handful of these) just to wait for failure. Especially if feature is non critical and it does many updates while you are interacting with the app. Wouldn&amp;rsquo;t it be nicer if, after failing, app simply stopped trying for some time?</description></item><item><title>Sharing database between services will hurt you</title><link>https://marekpiechut.github.io/post/2016-07-31-shared-database-pain/</link><pubDate>Sun, 31 Jul 2016 23:33:41 +0000</pubDate><guid>https://marekpiechut.github.io/post/2016-07-31-shared-database-pain/</guid><description>Sharing database between application services is one of worst and most common anti-patterns you can still see around. It will hurt you in so many ways, yet it looks so nice and easy at the beginning.
Going fast like crazy In the beginning it looks like it makes you go fast. You can get all data in application by just querying same database. Every modification you do is immediately visible in other services.</description></item></channel></rss>