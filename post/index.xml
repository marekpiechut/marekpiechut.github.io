<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on rand(4) Thoughts</title><link>https://marekpiechut.github.io/post/</link><description>Recent content in Posts on rand(4) Thoughts</description><generator>Hugo -- 0.128.0</generator><language>en-us</language><copyright>2024 - Marek Piechut</copyright><lastBuildDate>Sun, 30 Jun 2024 12:44:09 +0000</lastBuildDate><atom:link href="https://marekpiechut.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Investigate poor performance React components with “React Profiler”</title><link>https://marekpiechut.github.io/post/2021-06-30_investigate-poor-performance-react-components-with-react-profiler/</link><pubDate>Wed, 30 Jun 2021 06:32:56 +0000</pubDate><guid>https://marekpiechut.github.io/post/2021-06-30_investigate-poor-performance-react-components-with-react-profiler/</guid><description>This post is a work in progress chapter from “React Performance” book i’ve started working on and haven’t touched for few months. Looks like it will never be released, so I’ll just post parts that I think might be useful as blog posts._You’re probably here, because you already know that something is wrong with a part of your application. Maybe after some change, maybe when hit with a big dataset, your component/screen started to get slow.</description></item><item><title>Corne MX 3.0 Keyboard build guide</title><link>https://marekpiechut.github.io/post/2021-06-23_corne-mx-3.0-keyboard-build-guide/</link><pubDate>Wed, 23 Jun 2021 10:18:38 +0000</pubDate><guid>https://marekpiechut.github.io/post/2021-06-23_corne-mx-3.0-keyboard-build-guide/</guid><description>Introduction ⌨️ Typed with: Corne MX with Gateron Brown &amp;amp; BM40 with ultra-light Gateron Clear
This is a build guide for Corne Keyboard (Crkbd) Cherry MX keyboard version 3.0.1 by foostan. Original Japanese guide is available here. Unfortunately there’s no official guide in English for this particular version, but I’ve been recently building one of them, so here it is. Please keep in mind that this version is not a translation and I don’t have even slightest Japanese knowledge.</description></item><item><title>Get lazy loading cheap with IntersectionObserver in React</title><link>https://marekpiechut.github.io/post/2020-07-07_get-lazy-loading-cheap-with-intersectionobserver-in-react/</link><pubDate>Tue, 07 Jul 2020 08:01:56 +0000</pubDate><guid>https://marekpiechut.github.io/post/2020-07-07_get-lazy-loading-cheap-with-intersectionobserver-in-react/</guid><description>Getting lazy loaded web page elements based on scroll position has been a performance or maintenance nightmare. You either loosen components encapsulation and build a complex mechanism with single scroll handler notifying elements when needed, or end up with huge amount of onScroll handlers that will kill page performance. Thanks to W3C working draft from 2019 being already implemented in all major browsers we can get rid of all this stuff.</description></item><item><title>Authentication and Authorization in NodeJS GraphQL API</title><link>https://marekpiechut.github.io/post/2019-01-21_authentication-and-authorization-in-nodejs-graphql-api/</link><pubDate>Mon, 21 Jan 2019 13:29:06 +0000</pubDate><guid>https://marekpiechut.github.io/post/2019-01-21_authentication-and-authorization-in-nodejs-graphql-api/</guid><description>Most of GraphQL APIs that are developed are probably not meant for public access without any authorization. Sooner or later you’ll need to somehow limit access to only authenticated users or limit resources so that only allowed users are able to see them.
In this post, we’ll take a look at how you could implement GraphQL security in applications using NodeJS, Passport and Apollo Server.
Ways to implement authentication There are a few ways you could add access rights to your GraphQL APIs:</description></item><item><title>Get rid of some fat from your React production build</title><link>https://marekpiechut.github.io/post/2017-11-02_get-rid-of-some-fat-from-your-react-production-build/</link><pubDate>Thu, 02 Nov 2017 10:40:08 +0000</pubDate><guid>https://marekpiechut.github.io/post/2017-11-02_get-rid-of-some-fat-from-your-react-production-build/</guid><description>If you’re using Webpack with React you can get some nice size and load time optimizations with just a few small configuration changes. Almost for free, without messing with your code.</description></item><item><title>Will Chrome optimize your object factories</title><link>https://marekpiechut.github.io/post/2017-08-22_will-chrome-optimize-your-object-factories/</link><pubDate>Tue, 22 Aug 2017 09:05:57 +0000</pubDate><guid>https://marekpiechut.github.io/post/2017-08-22_will-chrome-optimize-your-object-factories/</guid><description>… or does it make sense to use new or Object.create anymore? We all love and use factories and object literals in our JS code. It’s clean, readable, there’s little space for errors and (the best of all) it allows private state. (Check here if private members in Javascript is something new to you.)
But there’s something worrying about them&amp;hellip; Check out the following code:
It looks like we’re creating new add , sub and getVal functions over and over again.</description></item><item><title>React Native — first impressions</title><link>https://marekpiechut.github.io/post/2017-02-13_react-nativefirst-impressions/</link><pubDate>Mon, 13 Feb 2017 13:57:06 +0000</pubDate><guid>https://marekpiechut.github.io/post/2017-02-13_react-nativefirst-impressions/</guid><description>First thoughts about React Native after more than a month of iOS app development. Good and bad sides of building your app with React Native.</description></item><item><title>Git process that works - say no to GitFlow</title><link>https://marekpiechut.github.io/post/2017-02-08_git-process-that-works-say-no-to-gitflow/</link><pubDate>Wed, 08 Feb 2017 12:59:16 +0000</pubDate><guid>https://marekpiechut.github.io/post/2017-02-08_git-process-that-works-say-no-to-gitflow/</guid><description>I’ve been working with Git for some time now, probably 5 years or so. Tried (or been forced to) quite a few other VCS-es before (CVS, SVN, Mercurial and even some Perforce). To be honest I wouldn’t like going back to any of them. Git is so good and gives you so fine grained control over your repository you won’t miss your old VCS. It lets you work in a workflow that’s ideally suited for you, yet allows keeping everything clean and predictable in public/release code.</description></item><item><title>Circuit breakers - You don't need to wait for failures.</title><link>https://marekpiechut.github.io/post/2016-09-16-circuit-breakers/</link><pubDate>Fri, 16 Sep 2016 23:33:41 +0000</pubDate><guid>https://marekpiechut.github.io/post/2016-09-16-circuit-breakers/</guid><description>It gets very annoying when web app keeps hanging on server requests, only to fail with a timeout few seconds later. Or uses up all available network connections (remember, we only have handful of these) just to wait for failure. Especially if feature is non critical and it does many updates while you are interacting with the app. Wouldn&amp;rsquo;t it be nicer if, after failing, app simply stopped trying for some time?</description></item><item><title>One year with React</title><link>https://marekpiechut.github.io/post/2016-09-02-react-lessons-learned/</link><pubDate>Fri, 02 Sep 2016 23:59:59 +0000</pubDate><guid>https://marekpiechut.github.io/post/2016-09-02-react-lessons-learned/</guid><description>It&amp;rsquo;s almost a year now since I&amp;rsquo;m working with React and Flux. After all this time I think I&amp;rsquo;ve learned a lot about how to build React apps, so they are easy to test, maintain and that components can be easily reused.
Here are some of my most important conclusions. I think following them will make your life really easier, especially if you&amp;rsquo;re just starting with it.
Is it worth it?</description></item><item><title>Sharing database between services will hurt you</title><link>https://marekpiechut.github.io/post/2016-07-31-shared-database-pain/</link><pubDate>Sun, 31 Jul 2016 23:33:41 +0000</pubDate><guid>https://marekpiechut.github.io/post/2016-07-31-shared-database-pain/</guid><description>Sharing database between application services is one of worst and most common anti-patterns you can still see around. It will hurt you in so many ways, yet it looks so nice and easy at the beginning.
Going fast like crazy In the beginning it looks like it makes you go fast. You can get all data in application by just querying same database. Every modification you do is immediately visible in other services.</description></item></channel></rss>